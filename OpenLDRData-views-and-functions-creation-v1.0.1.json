
IF NOT EXISTS(select * from sys.databases where name='OpenLDRData')
BEGIN
	PRINT 'The database OpenLDRData doesn''t exist'
	RETURN 
END
GO

USE [OpenLDRData]
GO
/****** Object:  UserDefinedFunction [dbo].[GetAgeGroup]    Script Date: 27/08/2019 09:09:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[GetAgeGroup] ( @InString Int )
RETURNS nvarchar(64)
WITH EXECUTE AS CALLER
AS
BEGIN
    -- notice the spaces before the age groups to help with sorting
    DECLARE @OutString nvarchar(64);

    IF ( @InString Is Null ) BEGIN
        SET @OutString = 'No Age Specified';
    END ELSE BEGIN
		SET @OutString = 
	        CASE 
			WHEN @InString < 2 THEN ' <2'
			WHEN @InString BETWEEN 2 and 5 THEN ' 2-5'
			WHEN @InString BETWEEN 6 and 14 THEN ' 6-14'
			WHEN @InString BETWEEN 15 and 49 THEN '15-49'
			WHEN @InString >= 50 THEN '50+'
			ELSE 'No Age Specified'
		    END;
    END;
	    
    RETURN(@OutString);

END;



GO
/****** Object:  UserDefinedFunction [dbo].[getHealthCareCode]    Script Date: 27/08/2019 09:09:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[getHealthCareCode]
(
	-- Add the parameters for the function here
	@facilityCode varchar(20)
)
RETURNS VARCHAR(20)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @healthAreaCode varchar(20)

	SELECT @healthAreaCode = HealthcareDistrictCode FROM OpenLDRDict.dbo.viewFacilities dict WHERE dict.FacilityCode = @facilityCode

	-- Return the result of the function
	RETURN @healthAreaCode

END




GO
/****** Object:  UserDefinedFunction [dbo].[GetReasonForTest]    Script Date: 27/08/2019 09:09:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetReasonForTest] (@InString nvarchar(1024))
RETURNS nvarchar(64)
WITH EXECUTE AS CALLER
AS
BEGIN
    
    DECLARE @OutString nvarchar(64);

    IF (@InString Is Null) BEGIN
        SET @OutString = 'Reason Not Specified';
    END ELSE BEGIN
		SET @OutString = 
	        CASE 
				WHEN @InString = 'Nao Prenchido' THEN 'Not Specified'
				WHEN @InString = 'Suspect treatment failure' THEN 'Suspected treatment failure'
				WHEN @InString = 'Repiticas apos AMA' THEN 'Repeat after breastfeeding'
				WHEN @InString = 'Rotina' THEN 'Routine'
				WHEN @InString = '' THEN 'Reason Not Specified'
			ELSE @InString
		    END;
    END;
	    
    RETURN(@OutString);

END;



GO
/****** Object:  UserDefinedFunction [dbo].[getRequestIDsWithUpdatedDateTimeStamp]    Script Date: 27/08/2019 09:09:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[getRequestIDsWithUpdatedDateTimeStamp](@startDate date, @endDate date)
RETURNS @requestIDs TABLE (
   RequestID nvarchar(26) PRIMARY KEY CLUSTERED
) 
AS
BEGIN
	INSERT INTO @requestIDS
	SELECT Requests.RequestId
    FROM Requests LEFT JOIN LabResults ON Requests.RequestID = labResults.RequestID AND Requests.OBRSetID = LabResults.OBRSetID
    WHERE (
            (Requests.LIMSPanelCode = 'VIRAL')
            OR (Requests.LIMSPanelCode = 'HIVVL')
          )
    AND (
		(Requests.DateTimeStamp >= @startDate AND Requests.DateTimeStamp < @endDate)
		OR
		(LabResults.DateTimeStamp Is Not Null AND LabResults.DateTimeStamp >= @startDate AND LabResults.DateTimeStamp < @endDate)
		)
	GROUP BY Requests.RequestID;
 
   RETURN;
END;



GO
/****** Object:  UserDefinedFunction [dbo].[IfEmptyReturnValue]    Script Date: 27/08/2019 09:09:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[IfEmptyReturnValue] (@InString nvarchar(1024), @ReturnIfEmpty nvarchar(1024))
RETURNS nvarchar(1024)
WITH EXECUTE AS CALLER
AS
BEGIN
	-- This function is a kind of override for IsNull in order to not only check for Null values but for empty strings
	-- It is definitely a bit slower so if you need it to run on a large data set and know the exact values you are trying to eliminate it might
	-- be best to do it direclty in the SQL or making this function more direct.
	-- SELECT dbo.IfEmptyReturnValue(Null,'00');
	-- SELECT dbo.IfEmptyReturnValue('','00');
	-- SELECT dbo.IfEmptyReturnValue('    ','00');
	-- SELECT dbo.IfEmptyReturnValue('a','00');
    
    DECLARE @OutString nvarchar(1024);

    IF (@InString Is Null) BEGIN
        SET @OutString = @ReturnIfEmpty;
    END ELSE BEGIN
		SET @OutString = 
	        CASE LTRIM(RTRIM(@InString))
			WHEN '' THEN @ReturnIfEmpty
			ELSE @InString
		    END;
    END;
	    
    RETURN(@OutString);

END;


GO
/****** Object:  UserDefinedFunction [dbo].[ViralLoadResultMerge]    Script Date: 27/08/2019 09:09:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ViralLoadResultMerge] (
				@HIVVL_Result nvarchar(1024),
				@LIMSCodedValue nvarchar(1024)
			--@PCR_ViralLoadCAPCTM nvarchar(1024)
			)
RETURNS nvarchar(1024)
WITH EXECUTE AS CALLER
AS
BEGIN
	-- This function examines four fields and returns a group the result belongs.
	-- The highest priority is given to the viral load result kicked off by the HIVVL panel and then viral load results kicked off by the PCR LIMSPanelCode
	-- Note that the PCR only results in the single result column PCR_ViralLoadCAPCTM <
    DECLARE @OutString nvarchar(1024);
	DECLARE @results TABLE(Code varchar(50), Value varchar(100))

	INSERT INTO @results VAlUES('TND','Nivel de detecçao baixo') , ('LDL', 'Nivel de detecçao baixo') , ('NEG', 'Negativo') , ('POS','Positivo') , ('I','Indeterminado')

	IF (@HIVVL_Result Is Null OR @HIVVL_Result = '') BEGIN
		SELECT @OutString = ISNULL(Value, @LIMSCodedValue) FROM @results WHERE Code = @LIMSCodedValue
	END
	ELSE
	BEGIN
		SET @OutString = @HIVVL_Result
	END
		
	    
    RETURN(@OutString);

END;



GO
/****** Object:  UserDefinedFunction [dbo].[ViralLoadResultRange]    Script Date: 27/08/2019 09:09:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ViralLoadResultRange] (
				@HIVVL_ViralLoadResult nvarchar(1024), 
				@HIVVL_ViralLoadCAPCTM nvarchar(1024)
				--@PCR_ViralLoadCAPCTM nvarchar(1024)
			)
RETURNS nvarchar(1024)
WITH EXECUTE AS CALLER
AS
BEGIN
	-- This function examines four fields and returns a group the result belongs.
	-- The highest priority is given to the viral load result kicked off by the HIVVL panel and then viral load results kicked off by the PCR LIMSPanelCode
	-- Note that the PCR only results in the single result column PCR_ViralLoadCAPCTM <
    DECLARE @OutString nvarchar(1024);

    IF (@HIVVL_ViralLoadResult Is Not Null) BEGIN
		-- Examinining the data for 2016 this means some variation on below detectable level is in this column
        SET @OutString = 'Suppressed';
    END ELSE BEGIN

	    IF (@HIVVL_ViralLoadCAPCTM Is Not Null) BEGIN
			IF (IsNumeric( @HIVVL_ViralLoadCAPCTM ) = 1) BEGIN
				IF ( @HIVVL_ViralLoadCAPCTM  < 1000 ) BEGIN
					SET @OutString = 'Suppressed';
				END ELSE BEGIN
					SET @OutString = 'Not Suppressed';
				END;

			END ELSE BEGIN
				-- HIVVL_ViralLoadResult must be text
				IF ( @HIVVL_ViralLoadCAPCTM  = 'Positive' ) BEGIN
					SET @OutString = 'Not Suppressed';
				END ELSE BEGIN
					SET @OutString = 
						CASE @HIVVL_ViralLoadCAPCTM 
						WHEN 'Interminado' THEN 'Indeterminate'
						WHEN 'Positive' THEN 'Not Suppressed'
						ELSE 'Suppressed'
						END;
				END;
			END;

		END 
		
    END;
	    
    RETURN(@OutString);

END;
GO


INSERT INTO [dbo].[VersionControl] VALUES(GETDATE(),GETDATE(),null,null,null,'1.0.1')
GO
